package org.usfirst.frc.team649.robot.commands;

import org.usfirst.frc.team649.robot.Robot;

import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DrivetrainPIDCommadTimeoutBackup extends Command {
	double distance;
	public PIDController drivePID;
	public double encoderRight;
	public double encoderLeft;
	double startAngle;
	double endAngle;
	public Timer time;
	public Timer timeOut;
	boolean isFinished;
	
    public DrivetrainPIDCommadTimeoutBackup(double distance) {
    	requires(Robot.drive);
    	drivePID = Robot.drive.getPIDController();
    	//drivePIDRight   = Robot.drivetrain.getPIDController();
    	this.distance = distance;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	time = new Timer();
    	timeOut = new Timer();
    	startAngle = 0;
    	endAngle = 0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	isFinished = !Robot.isAutoTimeoutTurnTimedOut;
    	Robot.drive.resetEncoders();
    	drivePID.enable();
    	double setpoint = Robot.drive.getPosition() + distance;
		drivePID.setPID(0.03, 0, 0.05);
		drivePID.setSetpoint(setpoint);
    	SmartDashboard.putNumber("Setpoint", setpoint);
    	System.out.println("DT PID: setpoint = " + setpoint);
    	timeOut.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(drivePID.onTarget() && time.get() < 0.01){
    		time.start();
    	}else if(time.get() > 0.01 && !drivePID.onTarget()){
    		time.stop();
    		time.reset();
    	}
    	if(time.get()> 0.2){
    		isFinished = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	encoderRight = Robot.drive.rightEncoder.getDistance();
    	encoderLeft = Robot.drive.leftEncoder.getDistance();
        return isFinished;
    }

    // Called once after isFinished returns true
    protected void end() {
    	drivePID.disable();
    	SmartDashboard.putBoolean("End", true);
    	SmartDashboard.putNumber("encoder Right", encoderRight);
    	SmartDashboard.putNumber("encoder left", encoderLeft);
    	SmartDashboard.putBoolean("pid done", true);
    	Robot.drive.rawDrive(0, 0);
    	Robot.isPIDActive = false;
    	time.stop();
    	time.reset();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
